{
  "hash": "73c6b037843afb5f1d396e481582e6d0",
  "result": {
    "markdown": "---\ntitle: \"Week4 - Introduction to Gene expression analysis part 2\"\nauthor: \"Sebastian Ayala Ruano\"\ndate: today\noutput: html_document\n---\n\n\nThis R script serves as a scaffold for adding the code required to fulfill the assignments. It includes the assignments as well as a few hints.\n\nAdd the necessary code and type your answers in this document for your own record.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Import libraries\nlibrary(ggplot2)\nlibrary(readr)\nlibrary(dplyr)\nlibrary(tibble)\nlibrary(reshape2)\nlibrary(conflicted)\nlibrary(tidyr)\nlibrary(purrr)\nlibrary(limma)\nlibrary(edgeR)\nlibrary(corrmorant)\n```\n:::\n\n\n## Assignment 3: Data exploration on the gene level\n\n### Convert the CPM values to FPKM values. For some of the exercises below, we need to convert the CPM expression values to FPKM expression values.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load data\ngeneTotExonLengths <- read_delim(\"Data/MAGNET_exonLengths.txt\", delim = \"\\t\")\ngxData <- read_delim(\"Data/MAGNET_GeneExpressionData_CPM_19112020.txt\", delim = \"\\t\")\nsampleInfo <- read_csv(\"Data/MAGNET_SampleData_18112022.csv\")\n\n# Add gene ID as the row names\ngxData <- column_to_rownames(gxData, var = \"EnsemblGeneID\")\ngeneTotExonLengths <- column_to_rownames(geneTotExonLengths, var = \"EnsemblGeneID\")\n\n# Check that row names are the same\nall(rownames(geneTotExonLengths) == rownames(gxData)) # TRUE (just a check)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n# Add sample name as the row names\nsampleInfo <- column_to_rownames(sampleInfo, var = \"sample_name\")\n\n# Convert CPM expression values to FPKM\ncpm2fpkm <- function(x) {\n\tt <- 2^(x) * 1E3 / geneTotExonLengths[, 1] # . before variable makes it a hidden variable\n}\ngxData_fpkm <- cpm2fpkm(gxData)\n```\n:::\n\n\n### What does FPKM stand for? How does this measure differ from CPM? (Google)\nThese metrics attempt to normalize for sequencing depth and gene length. Normalized expression units are necessary to remove technical biases in \nsequenced data such as depth of sequencing and gene length, and make gene expressions directly comparable within and across samples. More sequencing depth \nproduces more read count for a gene expressed at the same level and differences in gene length generate unequal reads count for genes expressed at the same level.\n\nCPM is a basic gene expression unit that normalizes only for sequencing depth (depth-normalized counts). It is biased in some applications where the gene \nlength influences gene expression, such as RNA-seq.\n\n\n```{=latex}\n\\begin{equation}{}\nCPM = \\frac{N \\;reads \\;mapped \\;to \\;gene \\times 10^{6}}{Total \\;N \\;of \\;mapped \\;reads}\n\\end{equation}\n```\n\n\nRPKM (reads per kilobase of transcript per million reads mapped) is a gene expression unit that measures the expression levels (mRNA abundance) of genes \nor transcripts. RPKM is a gene length normalized expression unit that is used for identifying the differentially expressed genes by comparing the RPKM values \nbetween different experimental conditions. Generally, the higher the RPKM of a gene, the higher the expression of that gene.\n\n\n```{=latex}\n\\begin{equation}{}\nRPKM = \\frac{N \\;reads \\;mapped \\;to \\;gene \\times 10^{3} \\times 10^{6}}{Total \n\\;N \\;of \\;mapped \\;reads \\times  gene \\;length \\;in \\;bp}\n\\end{equation}\n```\n\n\nHere, 10^3 normalizes for gene length and 10^6 for sequencing depth factor.\n\nFPKM (fragments per kilobase of exon per million mapped fragments) is a gene expression unit which is analogous to RPKM. FPKM is used especially for \nnormalizing counts for paired-end RNA-seq data in which two (left and right) reads are sequenced from the same DNA fragment. Generally, the higher \nthe FPKM of a gene, the higher the expression of that gene.\n\nWhen we map paired-end data, both reads or only one read with high quality from a fragment can map to reference sequence. To avoid confusion or multiple \ncounting, the fragments to which both or single read mapped are counted and represented for FPKM calculation.\n\n### In you own words, describe what the code above does.\nThe code takes the gene expression values in CPM and normalize them by the length of the genes, according to the formula expressed before.\n\n### Can we compare the FPKM value of gene A between two samples to state in which sample gene A is more highly expressed? \nNo, because FPKM values are normalized by the length of genes, which means that we cannot compare the values across different samples.\n\n### Can we compare the FPKM value of gene A to gene B in a single sample to state which gene is more highly expressed?\nYes, because FPKM values are normalized by the length of the genes.\n\n### Can we compare the CPM values of gene A between two samples to determine in which sample gene A is more highly expressed? \nYes, because CPM values are normalized by the sequencing depth (depth-normalized counts) and they do not take into account the length of genes for the \nnormalization process.\n\n### Can we compare the CPM value of gene A to the value of gene B in a single sample to determine which gene is more highly expressed?\nNo, because CPM values are not normalized by the length of the genes.\n\n### Using the FPKM values, answer the following questions:\n\n#### What are the IDs of the 5 highest expressed genes? What is their function according to the GeneCards website?\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a column with the mean of expression values of all samples\nexp_mean_df <- gxData_fpkm %>%\n  rownames_to_column(var = \"geneID\") %>% \n  rowwise() %>%\n  mutate(exp_mean = mean(c_across(C00039:P01640))) %>%\n  column_to_rownames(var = \"geneID\") %>% \n  select(exp_mean)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select the 5 most expressed genes\nmax5_genes_mean <- exp_mean_df %>%\n  slice_max(n= 5, exp_mean)\n```\n:::\n\n\n|Gene ID|Name|Function|\n|---|---|---|\n|ENSG00000198804|MT-CO1|Contributes to cytochrome-c oxidase activity|\n|ENSG00000198899|MT-ATP6|Contributes to proton-transporting ATP synthase activity|\n|ENSG00000198938|MT-CO3|Involved in respiratory chain complex IV assembly|\n|ENSG00000198712|MT-CO2|Contributes to cytochrome-c oxidase activity|\n|ENSG00000198886|MT-ND4|Enables NADH dehydrogenase (ubiquinone) activity|\n\nAll of the genes are involved in processes related to mitochondria activity, which make sense because the dataset has muscle samples.\n\n#### What are the IDs of the 5 lowest expressed genes? What is their function according to the GeneCards website?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select the 5 lowest expressed genes\nmin5_genes_mean <- exp_mean_df %>%\n  slice_min(n = 5, exp_mean)\n```\n:::\n\n\n|Gene ID|Name|Function|\n|---|---|---|\n|ENSG00000015568|RGPD5|RAN is a small GTP-binding protein of the RAS superfamily that is associated with the nuclear membrane|\n|ENSG00000162105|SHANK2|This gene encodes a protein that is a member of the Shank family of synaptic proteins that may function as molecular scaffolds in the postsynaptic density of excitatory synapses|\n|ENSG00000267586|LINC00907|RNA Gene, and is affiliated with the lncRNA class|\n|ENSG00000215126|ZNG1F|Predicted to enable ATP binding activity|\n|ENSG00000183914|DNAH2|Dyneins are microtubule-associated motor protein complexes|\n\nThere are pseudogenes, RNA genes, and others related to different processes (i.e. synaptic genes).\n\n#### What are the IDs of the 5 most variable genes? What is their function according to the GeneCards website?\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a column with the mean of expression values of all samples\nexp_var_df <- gxData %>%\n  rownames_to_column(var = \"geneID\") %>% \n  rowwise() %>%\n  mutate(exp_var = var(c_across(C00039:P01640))) %>%\n  column_to_rownames(var = \"geneID\") %>% \n  select(exp_var)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select the 5 most variable genes\nmax5_genes_var <- exp_var_df %>% \n  slice_max(n= 5, exp_var)\n```\n:::\n\n\n|Gene ID|Name|Function|\n|---|---|---|\n|ENSG00000198692|EIF1AY|Eukaryotic Translation Initiation Factor 1A Y-Linked|\n|ENSG00000129824|RPS4Y1|Ribosomal Protein S4 Y-Linked 1|\n|ENSG00000114374|USP9Y|Ubiquitin Specific Peptidase 9 Y-Linked|\n|ENSG00000067048|DDX3Y|DEAD-Box Helicase 3 Y-Linked|\n|ENSG00000012817|KDM5D|Lysine Demethylase 5D - encodes a protein containing zinc finger domains|\n\n4 of these genes are related to Y chromosome, which are absent in the female samples.\n\n**Note: **By using the FPKM dataset, we got the same genes as the 5 mots highly expressed.\n\n##### What are the IDs of the 5 least variable (= stable!) genes? What is their function according to the GeneCards website?\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select the 5 least variable genes\nmin5_genes_var <- exp_var_df %>% \n  slice_min(n= 5, exp_var)\n```\n:::\n\n\n|Gene ID|Name|Function|\n|---|---|---|\n|ENSG00000136709|WD Repeat Domain 33|WD repeats are conserved regions, which may facilitate formation of heterotrimeric or multiprotein complexes|\n|ENSG00000089053|ANAPC5|Anaphase Promoting Complex Subunit 5|\n|ENSG00000111361|EIF2B1|Eukaryotic Translation Initiation Factor 2B Subunit Alpha|\n|ENSG00000086475|SEPHS1|Selenophosphate Synthetase 1|\n|ENSG00000106609|TMEM248|Transmembrane Protein 248|\n\nAll of the genes are related to conserved cellular functions - house keeping genes.\n\n### Using the CPM values, answer the following questions: \n\n#### Which 5 genes show the strongest correlation to age in the control group?\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get the dataframe with the list of sample names with NF\nNF_columns <- rownames_to_column(sampleInfo, var = \"sample\") %>% \n          dplyr::filter(etiology == \"NF\") %>% \n          dplyr::select(sample) %>% \n          pull(sample)\n\n# Get the gene expression data from the NF patients\nNF_data <- gxData %>%\n           dplyr::select(NF_columns)\n\n# Transpose the dataframe to have genes as columns \nNF_data <- as.data.frame(t(NF_data))\n\n# Get the metadata from NF patients\nt_sampleInfo <- as.data.frame(t(sampleInfo))\n\nNF_metadata <- t_sampleInfo %>%\n               rownames_to_column(var = \"covariate\") %>%\n               dplyr::select(c(NF_columns, covariate)) %>%\n               column_to_rownames(var = \"covariate\")\n\n# Transpose the dataframe to have age as column\nNF_metadata <- as.data.frame(t(NF_metadata))\n\n# Add age column into the gene expression dataframe\nNF_data <- NF_data %>%\n            mutate(age = NF_metadata$age)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate correlation values\ndata_cor <- cor(NF_data[ , colnames(NF_data) != \"age\"],\n                as.numeric(NF_data$age))\n\ndata_cor <- as.data.frame(data_cor)\n\n# Select the 5 most correlated genes with age in the control group\ncorr5_genes_age <- data_cor %>% \n  arrange(desc(abs(V1))) %>% \n  slice_head(n= 5)\n\n# Get the gene expression data\ncorr5_gene_data <- NF_data %>%\n           dplyr::select(row.names(corr5_genes_age))\n\n# Calculate significance (p value) of the 5 most correlated genes with age\ncorr5_genes_age[1,2] <- cor.test(corr5_gene_data$ENSG00000244681, as.numeric(NF_data$age))$p.value\ncorr5_genes_age[2,2] <- cor.test(corr5_gene_data$ENSG00000244694, as.numeric(NF_data$age))$p.value \ncorr5_genes_age[3,2] <- cor.test(corr5_gene_data$ENSG00000182264, as.numeric(NF_data$age))$p.value \ncorr5_genes_age[4,2] <- cor.test(corr5_gene_data$ENSG00000154080, as.numeric(NF_data$age))$p.value \ncorr5_genes_age[5,2] <- cor.test(corr5_gene_data$ENSG00000250337, as.numeric(NF_data$age))$p.value\n\ncolnames(corr5_genes_age) <- c(\"estimate\", \"p_value\")\n```\n:::\n\n\n- **Is the correlation positive or negative?**\n\n4 of the values are positive and one is negative\n\n- **Is the correlation significant?**\n\nYes, all of the correlations were significant\n\n#### What is their function according to the GeneCards website? Are they genes of which the expression is known to change with age (use Pubmed)?\n\n|Gene ID|Name|Function|\n|---|---|---|\n|ENSG00000244681|MTHFD2P1|Pseudogene|\n|ENSG00000244694|PTCHD4|Predicted to be integral component of membrane|\n|ENSG00000182264|IZUMO1|The sperm-specific protein Izumo is essential for sperm-egg plasma membrane binding and fusion|\n|ENSG00000154080|CHST9|Catalyzes the transfer of sulfate to position 4 of non-reducing N-acetylgalactosamine (GalNAc) residues in both N-glycans and O-glycans|\n|ENSG00000250337|PURPL|RNA Gene, and is affiliated with the lncRNA class. Diseases associated with colorectal cancer and myasthenic syndrome|\n\n#### Visualize the result for at least 1 gene (HINT: CPM values on the y-axis, age in years on the x-axis)\n\n**Scatter plot of one gene vs age**\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add age column into the 5 most correlated genes dataframe\ncorr5_gene_data <- corr5_gene_data %>%\n            mutate(Age = as.numeric(NF_metadata$age), .before = 1)\n\ncorr1gene_age <- corr5_gene_data %>%\n        select(Age, ENSG00000244681)\n\ncorr1gene_age_plot <- ggplot(corr1gene_age, aes(x = Age, y = ENSG00000244681)) +\n  geom_point() +\n  labs(x = \"Age\", y = \"ENSG00000244681 Expression\") +\n  scale_x_continuous(n.breaks = 10.0)\n\ncorr1gene_age_plot\n```\n\n::: {.cell-output-display}\n![](MSB1005_SkillsTrainingWeek4_2022_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n**Scatter plots, correlation values, and distributions of all genes and age**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorr_plot_allgenes <- ggcorrm(data = corr5_gene_data) +\n  theme_corrm(base_size = 6) +\n  theme(axis.text.x = element_text(angle = 90, size = 8),\n        axis.text.y = element_text(size = 8),\n        strip.text.x = element_text(size = 5),\n        strip.text.y = element_text(size = 5),\n        legend.text = element_text(size = 8),\n        legend.title = element_text(size = 8)) +\n  lotri(geom_point(alpha = 0.5)) +\n  lotri(geom_smooth(colour = \"red4\")) +\n  utri_heatmap(alpha = 0.5, corr_method = \"spearman\") +\n  utri_corrtext(corr_method = \"spearman\", size = 3.5) +\n  dia_histogram(lower = 0.1, fill = \"grey80\", color = 1) +\n  dia_density(lower = 0.1, alpha = .1, colour = \"red4\") +\n  scale_fill_gradient2(low = \"white\", mid = \"red3\", high = \"red4\",\n                       midpoint = 0.5, space = \"rgb\",\n                       guide = guide_colorbar(title = \"Correlation coefficient\"),\n                       limits = c(0, 1))\ncorr_plot_allgenes\n```\n\n::: {.cell-output-display}\n![](MSB1005_SkillsTrainingWeek4_2022_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n## Assignment 4: Differential gene expression analysis. \nNow that we have explored the gene expression data, it is time to perform a differential gene expression analysis.\n\n### What is differential gene expression analysis (DGEA)? What are some of the most common packages in R for DGEA?\nDifferential expression analysis means taking the normalised read count data and performing statistical analysis to discover quantitative changes in  \nexpression levels between experimental groups.\n\n**R packages:**\n\n- [DESeq2](https://bioconductor.org/packages/release/bioc/html/DESeq2.html)\n- [limma](https://bioconductor.org/packages/release/bioc/html/limma.html)\n\nWe are going to use the limma package to perform a DGEA. We need to use the CPM normalized values. Have a look at the limma guide section 15.4:\n(https://www.bioconductor.org/packages/devel/bioc/vignettes/limma/inst/doc/usersguide.pdf)\n\n### Implement the steps noted in the limma guide for the MAGNET dataset. Start with a DGEA between DCM patients and healthy controls.\n\n#### Limma-trend\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert counts to logCPM values\nlogCPM <- cpm(gxData, log = TRUE, prior.count = 3)\n\n# Create design matrix\ndesign = model.matrix(~0 + sampleInfo$etiology)\n\n# Apply limma pipeline\nfit <- lmFit(logCPM, design)\nfit <- eBayes(fit, trend = TRUE)\ntopTable(fit, coef = ncol(design))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                   logFC  AveExpr        t P.Value adj.P.Val        B\nENSG00000089053 6.381604 6.384943 961.3848       0         0 1415.207\nENSG00000129351 6.429434 6.416465 955.8661       0         0 1413.270\nENSG00000105323 6.380228 6.365844 944.4249       0         0 1409.213\nENSG00000136709 6.329745 6.324768 937.9541       0         0 1406.892\nENSG00000106609 6.348231 6.340574 921.1237       0         0 1400.769\nENSG00000176915 6.281051 6.282988 907.5412       0         0 1395.732\nENSG00000075785 6.481443 6.478184 898.0510       0         0 1392.161\nENSG00000100711 6.284988 6.278731 891.0022       0         0 1389.480\nENSG00000182944 6.459927 6.446393 890.8330       0         0 1389.416\nENSG00000113648 6.404155 6.400461 890.3165       0         0 1389.218\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Give more weight to fold-changes in the gene ranking\nfit <- lmFit(logCPM, design)\nfit <- treat(fit, lfc = log2(1.2), trend = TRUE)\ntopTreat(fit, coef = ncol(design))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                   logFC  AveExpr        t P.Value adj.P.Val\nENSG00000000003 6.117085 6.111910 388.5360       0         0\nENSG00000000419 6.294569 6.292874 480.5645       0         0\nENSG00000000457 6.100006 6.111824 433.3020       0         0\nENSG00000000460 5.886348 5.887347 308.1765       0         0\nENSG00000000938 5.992674 6.059126 206.5199       0         0\nENSG00000000971 6.391421 6.392179 255.8019       0         0\nENSG00000001036 6.299640 6.308049 581.1499       0         0\nENSG00000001084 6.273295 6.255830 284.7585       0         0\nENSG00000001167 6.134147 6.122626 201.0493       0         0\nENSG00000001460 5.943226 5.954836 370.8629       0         0\n```\n:::\n:::\n\n\nResults show the p value of 0 in some genes, which means that something is wrong.\n\n### Which co-variates should be taken along for correction? (confounding; see the \"alcohol causes lung cancer\" example from the lecture)\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert counts to logCPM values\nlogCPM <- cpm(gxData, log = TRUE, prior.count = 3)\n\n# Create design matrix considering confounding variables\ndesign = model.matrix(~0 + etiology + gender + age, data = sampleInfo)\n\n# Apply limma pipeline with confounding variables\nfit <- lmFit(logCPM, design)\n\ncont.matrix <- makeContrasts(DCMvsControl = etiologyDCM - etiologyNF,\n                             levels = design)\n\nfit <- contrasts.fit(fit, cont.matrix)\n\nefit <- eBayes(fit, trend = TRUE)\n\ndgeRes <- topTable(efit, coef = 'DCMvsControl', number = nrow(gxData))\n\nglimpse(dgeRes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 20,781\nColumns: 6\n$ logFC     <dbl> 0.15831103, 0.33966098, 0.21263013, -0.44141913, 0.36628640,…\n$ AveExpr   <dbl> 6.286287, 5.952977, 6.101884, 6.022681, 6.049712, 6.371697, …\n$ t         <dbl> 29.01545, 27.11832, 25.18996, -25.06301, 24.77563, -24.26241…\n$ P.Value   <dbl> 7.851116e-97, 1.689807e-89, 7.264246e-82, 2.342191e-81, 3.33…\n$ adj.P.Val <dbl> 1.631540e-92, 1.755794e-85, 5.031943e-78, 1.216827e-77, 1.38…\n$ B         <dbl> 210.1073, 193.3613, 175.9173, 174.7550, 172.1180, 167.3887, …\n```\n:::\n:::\n\n\nAfter including the cofounding variables, the p values are not 0, which means that \nthe cofounding variables are important for the analysis.\n\n### Copy the top 200 differentially expressed genes to for a quick [GO enrichment analysis](http://cbl-gorilla.cs.technion.ac.il/). Which processes are changed between DCM and controls? Do these processes make biological sense? (quick literature check!)\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select the 200 most correlated genes with age in the control group\nto200_corr_genes <- dgeRes %>%\n  slice_head(n = 200) %>%\n  rownames_to_column(var = \"Gene_ID\")  %>%\n  select(Gene_ID)\n\n# Select the names of all genes in the control group\nall_corr_genes <- dgeRes %>%\n  rownames_to_column(var = \"Gene_ID\")  %>%\n  select(Gene_ID)\n\n# Export target list to csv file\nwrite_csv(to200_corr_genes, \"Outputs/to200_corr_genes.csv\", col_names = FALSE)\n\n# Export background list to csv file\nwrite_csv(all_corr_genes, \"Outputs/all_corr_genes.csv\", col_names = FALSE)\n```\n:::\n\n\nIn the [GOrilla server](http://cbl-gorilla.cs.technion.ac.il/), the inputs are the target and background tables exported in the previous step. \nThe results are shown in the following figure:\n\n![GOrilla results](Outputs/gorilla_results.png)\n\nThe results show that the most enriched GO terms are related to inflammation and \nstructural processed, and the immune system, which is consistent with the literature.\n",
    "supporting": [
      "MSB1005_SkillsTrainingWeek4_2022_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}