[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R programming skills summary - Experimental Design and Data Management 2022",
    "section": "",
    "text": "This is a summary of the R programming skills sessions of the Experimental Design and Data Management (2223-MSB1005) course 2022. The course is part of the Master of Systems Biology at the Maastrich University. The course is taught by Prof. Michiel Adriaens and Prof. Aaron Isaacs."
  },
  {
    "objectID": "MSB1005_SkillsTrainingWeek3_2022.html",
    "href": "MSB1005_SkillsTrainingWeek3_2022.html",
    "title": "1  Week3 - Introduction to Gene expression analysis part 1",
    "section": "",
    "text": "This R script serves as a scaffold for adding the code required to fulfill the assignments. It includes the assignments as well as a few hints.\nAdd the necessary code and type your answers in this document for your own record."
  },
  {
    "objectID": "MSB1005_SkillsTrainingWeek3_2022.html#assignment-1-importing-the-data-and-inspecting-sample-information",
    "href": "MSB1005_SkillsTrainingWeek3_2022.html#assignment-1-importing-the-data-and-inspecting-sample-information",
    "title": "1  Week3 - Introduction to Gene expression analysis part 1",
    "section": "1.1 Assignment 1: Importing the data and inspecting sample information",
    "text": "1.1 Assignment 1: Importing the data and inspecting sample information\nAfter unzipping the required transcriptomics (gene expression) file and sample information file, import both files as two separate objects. First set the active working directory to the folder containing the files.\n\n# Load data\ngxData <- read_delim(\"Data/MAGNET_GeneExpressionData_CPM_19112020.txt\", delim =\"\\t\")\nsampleInfo <- read_csv(\"Data/MAGNET_SampleData_18112022.csv\")\n\n# Add gene ID as the row names\ngxData <- column_to_rownames(gxData, var = \"EnsemblGeneID\")\n\n# Add sample name as the row names\nsampleInfo <- column_to_rownames(sampleInfo, var = \"sample_name\")\n\n\n1.1.1 Using the sampleInfo object, answer the following questions: What does DCM, HCM and PPCM stand for? (hint: Google)\n\nDCM: Dilated cardiomyopathy\nHCM: Hypertrophic cardiomyopathy\nPPCM: Postpartum cardiomyopathy\n\n\n\n1.1.2 How many co-variates are there? What do they mean? What type of value does each contain? (e.g. binary, continuous, categorical)\n\n# Number of covariates\nn_co_variates = ncol(sampleInfo)\n\n# Types of variables of covariates\nstr(sampleInfo)\n\n'data.frame':   366 obs. of  19 variables:\n $ tissue_source: chr  \"NF\" \"NF\" \"NF\" \"NF\" ...\n $ etiology     : chr  \"NF\" \"NF\" \"NF\" \"NF\" ...\n $ gender       : chr  \"Male\" \"Male\" \"Male\" \"Female\" ...\n $ race         : chr  \"AA\" \"AA\" \"AA\" \"AA\" ...\n $ age          : num  18 26 17 59 59 50 15 53 62 16 ...\n $ weight       : num  70 85 68 66 87 87 70 91 56 67 ...\n $ height       : num  175 183 173 157 157 175 183 165 168 163 ...\n $ hw           : num  NA NA 400 380 NA 640 NA NA NA 256 ...\n $ lv_mass      : num  NA NA NA NA NA NA NA NA NA NA ...\n $ afib         : chr  \"No\" \"No\" \"No\" \"No\" ...\n $ VTVF         : chr  \"No\" \"No\" \"No\" \"No\" ...\n $ Diabetes     : chr  \"No\" \"No\" \"No\" \"No\" ...\n $ Hypertension : chr  \"No\" \"No\" \"No\" \"Yes\" ...\n $ LVEF         : num  0.37 NA 0.27 0.6 0.55 0.65 0.15 NA NA 0.51 ...\n $ RIN          : num  8.4 9.1 7.8 9.4 8.8 8.6 7.8 10 7.8 6.4 ...\n $ Library.Pool : chr  \"Magnet_10\" \"Magnet_11\" \"Magnet_09\" \"Magnet_06\" ...\n $ disease_race : chr  \"AA_NF\" \"AA_NF\" \"AA_NF\" \"AA_NF\" ...\n $ minexpr      : num  7.47 7.47 7.47 7.47 7.47 ...\n $ TIN.median.  : num  72.8 74.3 77.4 69.5 73.6 ...\n\n\nThe number of co-variates is 19.\nCovariates are variables known to affect disease susceptibility and are independent of tested genotypes at the population level. They are used to control for confounding factors in the analysis of the association between a disease and a genetic variant.\n\n\n1.1.3 Are all variables measured in all individuals?\nNo, there are NA values in some columns, which means that these values were not measured.\n\nna_values <- sampleInfo %>%\n  dplyr::select(everything()) %>% \n  summarise_all(list(~ sum(is.na(.))))\n\nna_values\n\n  tissue_source etiology gender race age weight height hw lv_mass afib VTVF\n1             0        0      0    0   0      0      1  7     207    5    2\n  Diabetes Hypertension LVEF RIN Library.Pool disease_race minexpr TIN.median.\n1        2            1   80   6            0            0       0           0\n\n\n\n\n1.1.4 Using the sampleInfo object, create an overview of the sample sizes and characteristics in each disease category: How many individuals are healthy? How many suffer from DCM, HCM, PPCM?\nMethod 1\n\netiology1 <- sampleInfo %>%\n  dplyr::select(etiology) %>% \n  table()\netiology1\n\netiology\n DCM  HCM   NF PPCM \n 166   28  166    6 \n\n\nMethod 2\n\netiology2 <- sampleInfo %>%\n  count(etiology)\n\netiology2\n\n  etiology   n\n1      DCM 166\n2      HCM  28\n3       NF 166\n4     PPCM   6\n\n\nMethod 3\n\netiology3 <- sampleInfo %>%\n  group_by(etiology) %>% \n  tally()\n\netiology3\n\n# A tibble: 4 × 2\n  etiology     n\n  <chr>    <int>\n1 DCM        166\n2 HCM         28\n3 NF         166\n4 PPCM         6\n\n\n\n\n1.1.5 What is the average age in each disease category?\n\navg_etiology_by_age <- sampleInfo %>%\n  group_by(etiology) %>%\n  summarise(\n    n = n(),\n    age = mean(age, na.rm = TRUE)\n  )\n\navg_etiology_by_age\n\n# A tibble: 4 × 3\n  etiology     n   age\n  <chr>    <int> <dbl>\n1 DCM        166  52.1\n2 HCM         28  48.7\n3 NF         166  55.9\n4 PPCM         6  34.7\n\n\n\n\n1.1.6 How many male and female individuals are there in each disease category?\n\ncount_etiology_by_gender <- sampleInfo %>%\n  group_by(etiology) %>%\n  count(gender)\n\ncount_etiology_by_gender\n\n# A tibble: 7 × 3\n# Groups:   etiology [4]\n  etiology gender     n\n  <chr>    <chr>  <int>\n1 DCM      Female    66\n2 DCM      Male     100\n3 HCM      Female    11\n4 HCM      Male      17\n5 NF       Female    89\n6 NF       Male      77\n7 PPCM     Female     6\n\n\n\n\n1.1.7 Are there other characteristics that are strikingly different between groups?\n\nsummary(sampleInfo)\n\n tissue_source        etiology            gender              race          \n Length:366         Length:366         Length:366         Length:366        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n      age            weight           height            hw       \n Min.   :15.00   Min.   : 27.00   Min.   : 55.0   Min.   :151.0  \n 1st Qu.:48.00   1st Qu.: 66.00   1st Qu.:163.0   1st Qu.:371.5  \n Median :55.00   Median : 78.00   Median :170.0   Median :448.0  \n Mean   :53.28   Mean   : 81.19   Mean   :168.7   Mean   :468.8  \n 3rd Qu.:62.00   3rd Qu.: 91.00   3rd Qu.:178.0   3rd Qu.:556.5  \n Max.   :83.00   Max.   :267.00   Max.   :196.0   Max.   :923.0  \n                                  NA's   :1       NA's   :7      \n    lv_mass          afib               VTVF             Diabetes        \n Min.   :104.0   Length:366         Length:366         Length:366        \n 1st Qu.:195.0   Class :character   Class :character   Class :character  \n Median :247.0   Mode  :character   Mode  :character   Mode  :character  \n Mean   :266.0                                                           \n 3rd Qu.:321.5                                                           \n Max.   :613.0                                                           \n NA's   :207                                                             \n Hypertension            LVEF             RIN         Library.Pool      \n Length:366         Min.   :0.0500   Min.   : 5.800   Length:366        \n Class :character   1st Qu.:0.1500   1st Qu.: 8.100   Class :character  \n Mode  :character   Median :0.2000   Median : 8.500   Mode  :character  \n                    Mean   :0.3068   Mean   : 8.451                     \n                    3rd Qu.:0.5200   3rd Qu.: 8.900                     \n                    Max.   :0.8000   Max.   :10.000                     \n                    NA's   :80       NA's   :6                          \n disease_race          minexpr       TIN.median.   \n Length:366         Min.   :7.469   Min.   :23.38  \n Class :character   1st Qu.:7.469   1st Qu.:61.26  \n Mode  :character   Median :7.469   Median :70.12  \n                    Mean   :7.469   Mean   :65.03  \n                    3rd Qu.:7.469   3rd Qu.:73.32  \n                    Max.   :7.469   Max.   :81.52  \n                                                   \n\n\nAn example of two features that are different between groups:\n\nggplot(sampleInfo, aes(x= LVEF, y = lv_mass, color = etiology)) +\n  geom_point()"
  },
  {
    "objectID": "MSB1005_SkillsTrainingWeek3_2022.html#assignment-2-data-exploration-on-the-sample-level",
    "href": "MSB1005_SkillsTrainingWeek3_2022.html#assignment-2-data-exploration-on-the-sample-level",
    "title": "1  Week3 - Introduction to Gene expression analysis part 1",
    "section": "1.2 Assignment 2: Data exploration on the sample level",
    "text": "1.2 Assignment 2: Data exploration on the sample level\n\n1.2.1 The gene expression dataset contains so-called log2-transformed CPM (counts per million) values: How are CPM values created from raw RNA-sequencing count data? And why is this needed? (HINT: Google “what the fpkm”)\nFPKM stands for fragments per kilobase of exon per million mapped fragments. It is used specifically in paired-end RNA-seq experiments. The interpretation of FPKM is that if you sequence your RNA sample again, you expect to see for gene i, FPKMi reads divided by gene i length over a thousand and divided by the total number of reads mapped over a million.\n\n\n1.2.2 Create and interpret 4 figures containing boxplots for all samples in the dataset, one for DCM, one figure for HCM, one for PPCM and one for the healthy controls.\nCreate dataframes with information of the samples in each disease category.\n\n# Create a vector of the names of etiologies\nnames_et <- etiology2$etiology\n\n# Get the names of the samples per etiology\nfor (i in names_et){\n    # Define the name of the dataframes with the list of samples per etiology\n    var_name <- paste(i,\"columns\",sep = \"_\")\n    # Get the dataframes with the list of sample names per etiology\n    df <- rownames_to_column(sampleInfo, var = \"sample\") %>% \n              dplyr::filter(etiology == i) %>% \n              dplyr::select(sample) %>% \n              pull(sample)\n    # Assign the names to the dataframes\n    assign(var_name, df)\n}\n\n\n1.2.2.1 Boxplot of NF patients\n\nNF_data <- gxData %>%\n           dplyr::select(NF_columns)\n\nNF_data_group <- gather(NF_data) # melt also works, but it is deprecated\n\nggplot(NF_data_group, aes(x = key, y = value)) +\n  geom_boxplot()\n\n\n\n\n\n\n1.2.2.2 Boxplot of DCM patients\n\nDCM_data <- gxData %>% \n           dplyr::select(DCM_columns)\n\nDCM_data_group <- gather(DCM_data) # melt also works, but it is deprecated\n\nggplot(DCM_data_group, aes(x = key, y = value)) +\n  geom_boxplot()\n\n\n\n\n\n\n1.2.2.3 Boxplot of HCM patients\n\nHCM_data <- gxData %>% \n           dplyr::select(HCM_columns)\n\nHCM_data_group <- gather(HCM_data) # melt also works, but it is deprecated\n\nggplot(HCM_data_group, aes(x = key, y = value)) +\n  geom_boxplot()\n\n\n\n\n\n\n1.2.2.4 Boxplot of PPCM patients\n\nPPCM_data <- gxData %>% \n           dplyr::select(PPCM_columns)\n\nPPCM_data_group <- gather(PPCM_data) # melt also works, but it is deprecated\n\nggplot(PPCM_data_group, aes(x = key, y = value)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n1.2.3 Create and interpret 4 figures containing density plots for all samples in the dataset, one figure for DCM, one for HCM, one for PPCM and one for the healthy controls.\n\n1.2.3.1 Density plot of all the values from the NF group colored by sample\n\nggplot(NF_data_group, aes(x = value, color = key)) +\n  geom_density(alpha = 0.2)\n\n\n\n\n\n\n1.2.3.2 Density plot of all the values from the NF group\n\nggplot(NF_data_group, aes(x = value)) +\n  geom_density()\n\n\n\n\nThe same code applies for the pther groups\n\n\n\n1.2.4 Assess the normality of all samples and summarize the results in a table or figure. (HINT: try ‘shapiro.test’)\n\n# Get random sample for all the samples\nnorm_df <- sample_n(gxData, 5000) %>%\n  #slice(gxData, 5000:8000) %>% \n  sapply(., shapiro.test) %>% \n  as_tibble() %>% \n  slice(2) %>% \n  gather(sample, p_value) %>%\n  mutate(normality = p_value < 0.05) \n\nnorm_df %>% \n  count(normality)\n\n# A tibble: 1 × 2\n  normality     n\n  <lgl>     <int>\n1 TRUE        366\n\n\n\n\n1.2.5 Perform a principal component analysis (PCA), visualize the results and color by the disease category, sex and other variables of interest. Interpret the results: what patterns do you see?\nHINT: use the functions ‘pca’ and ‘plotPcs’ from the package ‘pcaMethods’\n\n1.2.5.1 Calculate the PCAs\n\n# Transpose dataframe to merge with the metadata\nt_gxData <- t(gxData)\n\n# Calculate pca\npca_hf <- pca(t_gxData, method = \"svd\")\n\n\n\n1.2.5.2 Summary and barplot of the number of instances in the PCAs\n\n# Get a short summary on the calculated model\nsummary(pca_hf)\n\nsvd calculated PCA\nImportance of component(s):\n                 PC1     PC2\nR2            0.2726 0.07351\nCumulative R2 0.2726 0.34612\n\nplot(pca_hf)\n\n\n\n\n\n\n1.2.5.3 Merge pca scores with metadata for plotting\n\n# Merge pca scores with metadata\ndf_hf <- merge(scores(pca_hf), sampleInfo, by = 0)\n\n\n\n1.2.5.4 Plot the PCAs with the default them of plotsPcs\n\n## Create scatteplot of the PCA with ggplot version 2\nplotPcs(pca_hf)\n\n\n\n\n\n\n1.2.5.5 Plot the PCAs with ggplot\n\n## Create scatteplor of the PCA with ggplot version 1\nggplot(df_hf, aes(PC1, PC2, shape=gender, color=etiology)) +\n  geom_point() +\n  xlab(paste(\"PC1\", pca_hf@R2[1] * 100, \"% of the variance\")) +\n  ylab(paste(\"PC2\", pca_hf@R2[2] * 100, \"% of the variance\"))"
  },
  {
    "objectID": "MSB1005_SkillsTrainingWeek4_2022.html",
    "href": "MSB1005_SkillsTrainingWeek4_2022.html",
    "title": "2  Week4 - Introduction to Gene expression analysis part 2",
    "section": "",
    "text": "This R script serves as a scaffold for adding the code required to fulfill the assignments. It includes the assignments as well as a few hints.\nAdd the necessary code and type your answers in this document for your own record."
  },
  {
    "objectID": "MSB1005_SkillsTrainingWeek4_2022.html#assignment-3-data-exploration-on-the-gene-level",
    "href": "MSB1005_SkillsTrainingWeek4_2022.html#assignment-3-data-exploration-on-the-gene-level",
    "title": "2  Week4 - Introduction to Gene expression analysis part 2",
    "section": "2.1 Assignment 3: Data exploration on the gene level",
    "text": "2.1 Assignment 3: Data exploration on the gene level\n\n2.1.1 Convert the CPM values to FPKM values. For some of the exercises below, we need to convert the CPM expression values to FPKM expression values.\n\n# Load data\ngeneTotExonLengths <- read_delim(\"Data/MAGNET_exonLengths.txt\", delim = \"\\t\")\ngxData <- read_delim(\"Data/MAGNET_GeneExpressionData_CPM_19112020.txt\", delim = \"\\t\")\nsampleInfo <- read_csv(\"Data/MAGNET_SampleData_18112022.csv\")\n\n# Add gene ID as the row names\ngxData <- column_to_rownames(gxData, var = \"EnsemblGeneID\")\ngeneTotExonLengths <- column_to_rownames(geneTotExonLengths, var = \"EnsemblGeneID\")\n\n# Check that row names are the same\nall(rownames(geneTotExonLengths) == rownames(gxData)) # TRUE (just a check)\n\n[1] TRUE\n\n# Add sample name as the row names\nsampleInfo <- column_to_rownames(sampleInfo, var = \"sample_name\")\n\n# Convert CPM expression values to FPKM\ncpm2fpkm <- function(x) {\n    t <- 2^(x) * 1E3 / geneTotExonLengths[, 1] # . before variable makes it a hidden variable\n}\ngxData_fpkm <- cpm2fpkm(gxData)\n\n\n\n2.1.2 What does FPKM stand for? How does this measure differ from CPM? (Google)\nThese metrics attempt to normalize for sequencing depth and gene length. Normalized expression units are necessary to remove technical biases in sequenced data such as depth of sequencing and gene length, and make gene expressions directly comparable within and across samples. More sequencing depth produces more read count for a gene expressed at the same level and differences in gene length generate unequal reads count for genes expressed at the same level.\nCPM is a basic gene expression unit that normalizes only for sequencing depth (depth-normalized counts). It is biased in some applications where the gene length influences gene expression, such as RNA-seq.\n\\[\\begin{equation}{}\nCPM = \\frac{N \\;reads \\;mapped \\;to \\;gene \\times 10^{6}}{Total \\;N \\;of \\;mapped \\;reads}\n\\end{equation}\\]\nRPKM (reads per kilobase of transcript per million reads mapped) is a gene expression unit that measures the expression levels (mRNA abundance) of genes or transcripts. RPKM is a gene length normalized expression unit that is used for identifying the differentially expressed genes by comparing the RPKM values between different experimental conditions. Generally, the higher the RPKM of a gene, the higher the expression of that gene.\n\\[\\begin{equation}{}\nRPKM = \\frac{N \\;reads \\;mapped \\;to \\;gene \\times 10^{3} \\times 10^{6}}{Total\n\\;N \\;of \\;mapped \\;reads \\times  gene \\;length \\;in \\;bp}\n\\end{equation}\\]\nHere, 10^3 normalizes for gene length and 10^6 for sequencing depth factor.\nFPKM (fragments per kilobase of exon per million mapped fragments) is a gene expression unit which is analogous to RPKM. FPKM is used especially for normalizing counts for paired-end RNA-seq data in which two (left and right) reads are sequenced from the same DNA fragment. Generally, the higher the FPKM of a gene, the higher the expression of that gene.\nWhen we map paired-end data, both reads or only one read with high quality from a fragment can map to reference sequence. To avoid confusion or multiple counting, the fragments to which both or single read mapped are counted and represented for FPKM calculation.\n\n\n2.1.3 In you own words, describe what the code above does.\nThe code takes the gene expression values in CPM and normalize them by the length of the genes, according to the formula expressed before.\n\n\n2.1.4 Can we compare the FPKM value of gene A between two samples to state in which sample gene A is more highly expressed?\nNo, because FPKM values are normalized by the length of genes, which means that we cannot compare the values across different samples.\n\n\n2.1.5 Can we compare the FPKM value of gene A to gene B in a single sample to state which gene is more highly expressed?\nYes, because FPKM values are normalized by the length of the genes.\n\n\n2.1.6 Can we compare the CPM values of gene A between two samples to determine in which sample gene A is more highly expressed?\nYes, because CPM values are normalized by the sequencing depth (depth-normalized counts) and they do not take into account the length of genes for the normalization process.\n\n\n2.1.7 Can we compare the CPM value of gene A to the value of gene B in a single sample to determine which gene is more highly expressed?\nNo, because CPM values are not normalized by the length of the genes.\n\n\n2.1.8 Using the FPKM values, answer the following questions:\n\n2.1.8.1 What are the IDs of the 5 highest expressed genes? What is their function according to the GeneCards website?\n\n# Create a column with the mean of expression values of all samples\nexp_mean_df <- gxData_fpkm %>%\n  rownames_to_column(var = \"geneID\") %>% \n  rowwise() %>%\n  mutate(exp_mean = mean(c_across(C00039:P01640))) %>%\n  column_to_rownames(var = \"geneID\") %>% \n  select(exp_mean)\n\n\n# Select the 5 most expressed genes\nmax5_genes_mean <- exp_mean_df %>%\n  slice_max(n= 5, exp_mean)\n\n\n\n\n\n\n\n\n\nGene ID\nName\nFunction\n\n\n\n\nENSG00000198804\nMT-CO1\nContributes to cytochrome-c oxidase activity\n\n\nENSG00000198899\nMT-ATP6\nContributes to proton-transporting ATP synthase activity\n\n\nENSG00000198938\nMT-CO3\nInvolved in respiratory chain complex IV assembly\n\n\nENSG00000198712\nMT-CO2\nContributes to cytochrome-c oxidase activity\n\n\nENSG00000198886\nMT-ND4\nEnables NADH dehydrogenase (ubiquinone) activity\n\n\n\nAll of the genes are involved in processes related to mitochondria activity, which make sense because the dataset has muscle samples.\n\n\n2.1.8.2 What are the IDs of the 5 lowest expressed genes? What is their function according to the GeneCards website?\n\n# Select the 5 lowest expressed genes\nmin5_genes_mean <- exp_mean_df %>%\n  slice_min(n = 5, exp_mean)\n\n\n\n\n\n\n\n\n\nGene ID\nName\nFunction\n\n\n\n\nENSG00000015568\nRGPD5\nRAN is a small GTP-binding protein of the RAS superfamily that is associated with the nuclear membrane\n\n\nENSG00000162105\nSHANK2\nThis gene encodes a protein that is a member of the Shank family of synaptic proteins that may function as molecular scaffolds in the postsynaptic density of excitatory synapses\n\n\nENSG00000267586\nLINC00907\nRNA Gene, and is affiliated with the lncRNA class\n\n\nENSG00000215126\nZNG1F\nPredicted to enable ATP binding activity\n\n\nENSG00000183914\nDNAH2\nDyneins are microtubule-associated motor protein complexes\n\n\n\nThere are pseudogenes, RNA genes, and others related to different processes (i.e. synaptic genes).\n\n\n2.1.8.3 What are the IDs of the 5 most variable genes? What is their function according to the GeneCards website?\n\n# Create a column with the mean of expression values of all samples\nexp_var_df <- gxData %>%\n  rownames_to_column(var = \"geneID\") %>% \n  rowwise() %>%\n  mutate(exp_var = var(c_across(C00039:P01640))) %>%\n  column_to_rownames(var = \"geneID\") %>% \n  select(exp_var)\n\n\n# Select the 5 most variable genes\nmax5_genes_var <- exp_var_df %>% \n  slice_max(n= 5, exp_var)\n\n\n\n\n\n\n\n\n\nGene ID\nName\nFunction\n\n\n\n\nENSG00000198692\nEIF1AY\nEukaryotic Translation Initiation Factor 1A Y-Linked\n\n\nENSG00000129824\nRPS4Y1\nRibosomal Protein S4 Y-Linked 1\n\n\nENSG00000114374\nUSP9Y\nUbiquitin Specific Peptidase 9 Y-Linked\n\n\nENSG00000067048\nDDX3Y\nDEAD-Box Helicase 3 Y-Linked\n\n\nENSG00000012817\nKDM5D\nLysine Demethylase 5D - encodes a protein containing zinc finger domains\n\n\n\n4 of these genes are related to Y chromosome, which are absent in the female samples.\nNote: By using the FPKM dataset, we got the same genes as the 5 mots highly expressed.\n\n2.1.8.3.1 What are the IDs of the 5 least variable (= stable!) genes? What is their function according to the GeneCards website?\n\n# Select the 5 least variable genes\nmin5_genes_var <- exp_var_df %>% \n  slice_min(n= 5, exp_var)\n\n\n\n\n\n\n\n\n\nGene ID\nName\nFunction\n\n\n\n\nENSG00000136709\nWD Repeat Domain 33\nWD repeats are conserved regions, which may facilitate formation of heterotrimeric or multiprotein complexes\n\n\nENSG00000089053\nANAPC5\nAnaphase Promoting Complex Subunit 5\n\n\nENSG00000111361\nEIF2B1\nEukaryotic Translation Initiation Factor 2B Subunit Alpha\n\n\nENSG00000086475\nSEPHS1\nSelenophosphate Synthetase 1\n\n\nENSG00000106609\nTMEM248\nTransmembrane Protein 248\n\n\n\nAll of the genes are related to conserved cellular functions - house keeping genes.\n\n\n\n\n2.1.9 Using the CPM values, answer the following questions:\n\n2.1.9.1 Which 5 genes show the strongest correlation to age in the control group?\n\n# Get the dataframe with the list of sample names with NF\nNF_columns <- rownames_to_column(sampleInfo, var = \"sample\") %>% \n          dplyr::filter(etiology == \"NF\") %>% \n          dplyr::select(sample) %>% \n          pull(sample)\n\n# Get the gene expression data from the NF patients\nNF_data <- gxData %>%\n           dplyr::select(NF_columns)\n\n# Transpose the dataframe to have genes as columns \nNF_data <- as.data.frame(t(NF_data))\n\n# Get the metadata from NF patients\nt_sampleInfo <- as.data.frame(t(sampleInfo))\n\nNF_metadata <- t_sampleInfo %>%\n               rownames_to_column(var = \"covariate\") %>%\n               dplyr::select(c(NF_columns, covariate)) %>%\n               column_to_rownames(var = \"covariate\")\n\n# Transpose the dataframe to have age as column\nNF_metadata <- as.data.frame(t(NF_metadata))\n\n# Add age column into the gene expression dataframe\nNF_data <- NF_data %>%\n            mutate(age = NF_metadata$age)\n\n\n# Calculate correlation values\ndata_cor <- cor(NF_data[ , colnames(NF_data) != \"age\"],\n                as.numeric(NF_data$age))\n\ndata_cor <- as.data.frame(data_cor)\n\n# Select the 5 most correlated genes with age in the control group\ncorr5_genes_age <- data_cor %>% \n  arrange(desc(abs(V1))) %>% \n  slice_head(n= 5)\n\n# Get the gene expression data\ncorr5_gene_data <- NF_data %>%\n           dplyr::select(row.names(corr5_genes_age))\n\n# Calculate significance (p value) of the 5 most correlated genes with age\ncorr5_genes_age[1,2] <- cor.test(corr5_gene_data$ENSG00000244681, as.numeric(NF_data$age))$p.value\ncorr5_genes_age[2,2] <- cor.test(corr5_gene_data$ENSG00000244694, as.numeric(NF_data$age))$p.value \ncorr5_genes_age[3,2] <- cor.test(corr5_gene_data$ENSG00000182264, as.numeric(NF_data$age))$p.value \ncorr5_genes_age[4,2] <- cor.test(corr5_gene_data$ENSG00000154080, as.numeric(NF_data$age))$p.value \ncorr5_genes_age[5,2] <- cor.test(corr5_gene_data$ENSG00000250337, as.numeric(NF_data$age))$p.value\n\ncolnames(corr5_genes_age) <- c(\"estimate\", \"p_value\")\n\n\nIs the correlation positive or negative?\n\n4 of the values are positive and one is negative\n\nIs the correlation significant?\n\nYes, all of the correlations were significant\n\n\n2.1.9.2 What is their function according to the GeneCards website? Are they genes of which the expression is known to change with age (use Pubmed)?\n\n\n\n\n\n\n\n\nGene ID\nName\nFunction\n\n\n\n\nENSG00000244681\nMTHFD2P1\nPseudogene\n\n\nENSG00000244694\nPTCHD4\nPredicted to be integral component of membrane\n\n\nENSG00000182264\nIZUMO1\nThe sperm-specific protein Izumo is essential for sperm-egg plasma membrane binding and fusion\n\n\nENSG00000154080\nCHST9\nCatalyzes the transfer of sulfate to position 4 of non-reducing N-acetylgalactosamine (GalNAc) residues in both N-glycans and O-glycans\n\n\nENSG00000250337\nPURPL\nRNA Gene, and is affiliated with the lncRNA class. Diseases associated with colorectal cancer and myasthenic syndrome\n\n\n\n\n\n2.1.9.3 Visualize the result for at least 1 gene (HINT: CPM values on the y-axis, age in years on the x-axis)\nScatter plot of one gene vs age\n\n# Add age column into the 5 most correlated genes dataframe\ncorr5_gene_data <- corr5_gene_data %>%\n            mutate(Age = as.numeric(NF_metadata$age), .before = 1)\n\ncorr1gene_age <- corr5_gene_data %>%\n        select(Age, ENSG00000244681)\n\ncorr1gene_age_plot <- ggplot(corr1gene_age, aes(x = Age, y = ENSG00000244681)) +\n  geom_point() +\n  labs(x = \"Age\", y = \"ENSG00000244681 Expression\") +\n  scale_x_continuous(n.breaks = 10.0)\n\ncorr1gene_age_plot\n\n\n\n\nScatter plots, correlation values, and distributions of all genes and age\n\ncorr_plot_allgenes <- ggcorrm(data = corr5_gene_data) +\n  theme_corrm(base_size = 6) +\n  theme(axis.text.x = element_text(angle = 90, size = 8),\n        axis.text.y = element_text(size = 8),\n        strip.text.x = element_text(size = 5),\n        strip.text.y = element_text(size = 5),\n        legend.text = element_text(size = 8),\n        legend.title = element_text(size = 8)) +\n  lotri(geom_point(alpha = 0.5)) +\n  lotri(geom_smooth(colour = \"red4\")) +\n  utri_heatmap(alpha = 0.5, corr_method = \"spearman\") +\n  utri_corrtext(corr_method = \"spearman\", size = 3.5) +\n  dia_histogram(lower = 0.1, fill = \"grey80\", color = 1) +\n  dia_density(lower = 0.1, alpha = .1, colour = \"red4\") +\n  scale_fill_gradient2(low = \"white\", mid = \"red3\", high = \"red4\",\n                       midpoint = 0.5, space = \"rgb\",\n                       guide = guide_colorbar(title = \"Correlation coefficient\"),\n                       limits = c(0, 1))\ncorr_plot_allgenes"
  },
  {
    "objectID": "MSB1005_SkillsTrainingWeek4_2022.html#assignment-4-differential-gene-expression-analysis.",
    "href": "MSB1005_SkillsTrainingWeek4_2022.html#assignment-4-differential-gene-expression-analysis.",
    "title": "2  Week4 - Introduction to Gene expression analysis part 2",
    "section": "2.2 Assignment 4: Differential gene expression analysis.",
    "text": "2.2 Assignment 4: Differential gene expression analysis.\nNow that we have explored the gene expression data, it is time to perform a differential gene expression analysis.\n\n2.2.1 What is differential gene expression analysis (DGEA)? What are some of the most common packages in R for DGEA?\nDifferential expression analysis means taking the normalised read count data and performing statistical analysis to discover quantitative changes in\nexpression levels between experimental groups.\nR packages:\n\nDESeq2\nlimma\n\nWe are going to use the limma package to perform a DGEA. We need to use the CPM normalized values. Have a look at the limma guide section 15.4: (https://www.bioconductor.org/packages/devel/bioc/vignettes/limma/inst/doc/usersguide.pdf)\n\n\n2.2.2 Implement the steps noted in the limma guide for the MAGNET dataset. Start with a DGEA between DCM patients and healthy controls.\n\n2.2.2.1 Limma-trend\n\n# Convert counts to logCPM values\nlogCPM <- cpm(gxData, log = TRUE, prior.count = 3)\n\n# Create design matrix\ndesign = model.matrix(~0 + sampleInfo$etiology)\n\n# Apply limma pipeline\nfit <- lmFit(logCPM, design)\nfit <- eBayes(fit, trend = TRUE)\ntopTable(fit, coef = ncol(design))\n\n                   logFC  AveExpr        t P.Value adj.P.Val        B\nENSG00000089053 6.381604 6.384943 961.3848       0         0 1415.207\nENSG00000129351 6.429434 6.416465 955.8661       0         0 1413.270\nENSG00000105323 6.380228 6.365844 944.4249       0         0 1409.213\nENSG00000136709 6.329745 6.324768 937.9541       0         0 1406.892\nENSG00000106609 6.348231 6.340574 921.1237       0         0 1400.769\nENSG00000176915 6.281051 6.282988 907.5412       0         0 1395.732\nENSG00000075785 6.481443 6.478184 898.0510       0         0 1392.161\nENSG00000100711 6.284988 6.278731 891.0022       0         0 1389.480\nENSG00000182944 6.459927 6.446393 890.8330       0         0 1389.416\nENSG00000113648 6.404155 6.400461 890.3165       0         0 1389.218\n\n\n\n# Give more weight to fold-changes in the gene ranking\nfit <- lmFit(logCPM, design)\nfit <- treat(fit, lfc = log2(1.2), trend = TRUE)\ntopTreat(fit, coef = ncol(design))\n\n                   logFC  AveExpr        t P.Value adj.P.Val\nENSG00000000003 6.117085 6.111910 388.5360       0         0\nENSG00000000419 6.294569 6.292874 480.5645       0         0\nENSG00000000457 6.100006 6.111824 433.3020       0         0\nENSG00000000460 5.886348 5.887347 308.1765       0         0\nENSG00000000938 5.992674 6.059126 206.5199       0         0\nENSG00000000971 6.391421 6.392179 255.8019       0         0\nENSG00000001036 6.299640 6.308049 581.1499       0         0\nENSG00000001084 6.273295 6.255830 284.7585       0         0\nENSG00000001167 6.134147 6.122626 201.0493       0         0\nENSG00000001460 5.943226 5.954836 370.8629       0         0\n\n\nResults show the p value of 0 in some genes, which means that something is wrong.\n\n\n\n2.2.3 Which co-variates should be taken along for correction? (confounding; see the “alcohol causes lung cancer” example from the lecture)\n\n# Convert counts to logCPM values\nlogCPM <- cpm(gxData, log = TRUE, prior.count = 3)\n\n# Create design matrix considering confounding variables\ndesign = model.matrix(~0 + etiology + gender + age, data = sampleInfo)\n\n# Apply limma pipeline with confounding variables\nfit <- lmFit(logCPM, design)\n\ncont.matrix <- makeContrasts(DCMvsControl = etiologyDCM - etiologyNF,\n                             levels = design)\n\nfit <- contrasts.fit(fit, cont.matrix)\n\nefit <- eBayes(fit, trend = TRUE)\n\ndgeRes <- topTable(efit, coef = 'DCMvsControl', number = nrow(gxData))\n\nglimpse(dgeRes)\n\nRows: 20,781\nColumns: 6\n$ logFC     <dbl> 0.15831103, 0.33966098, 0.21263013, -0.44141913, 0.36628640,…\n$ AveExpr   <dbl> 6.286287, 5.952977, 6.101884, 6.022681, 6.049712, 6.371697, …\n$ t         <dbl> 29.01545, 27.11832, 25.18996, -25.06301, 24.77563, -24.26241…\n$ P.Value   <dbl> 7.851116e-97, 1.689807e-89, 7.264246e-82, 2.342191e-81, 3.33…\n$ adj.P.Val <dbl> 1.631540e-92, 1.755794e-85, 5.031943e-78, 1.216827e-77, 1.38…\n$ B         <dbl> 210.1073, 193.3613, 175.9173, 174.7550, 172.1180, 167.3887, …\n\n\nAfter including the cofounding variables, the p values are not 0, which means that the cofounding variables are important for the analysis.\n\n\n2.2.4 Copy the top 200 differentially expressed genes to for a quick GO enrichment analysis. Which processes are changed between DCM and controls? Do these processes make biological sense? (quick literature check!)\n\n# Select the 200 most correlated genes with age in the control group\nto200_corr_genes <- dgeRes %>%\n  slice_head(n = 200) %>%\n  rownames_to_column(var = \"Gene_ID\")  %>%\n  select(Gene_ID)\n\n# Select the names of all genes in the control group\nall_corr_genes <- dgeRes %>%\n  rownames_to_column(var = \"Gene_ID\")  %>%\n  select(Gene_ID)\n\n# Export target list to csv file\nwrite_csv(to200_corr_genes, \"Outputs/to200_corr_genes.csv\", col_names = FALSE)\n\n# Export background list to csv file\nwrite_csv(all_corr_genes, \"Outputs/all_corr_genes.csv\", col_names = FALSE)\n\nIn the GOrilla server, the inputs are the target and background tables exported in the previous step. The results are shown in the following figure:\n\n\n\nGOrilla results\n\n\nThe results show that the most enriched GO terms are related to inflammation and structural processed, and the immune system, which is consistent with the literature."
  }
]